// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DreamTrip.API.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ViewOrCreatePackageFeature : object, Xunit.IClassFixture<ViewOrCreatePackageFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "PackagesServiceTest.feature"
#line hidden
        
        public ViewOrCreatePackageFeature(ViewOrCreatePackageFeature.FixtureData fixtureData, DreamTrip_API_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "View or Create Package", "    As traveler I want to view a travel package\r\n    As a travel agency I want to" +
                    " create a travel package", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
    #line hidden
#line 6
        testRunner.Given("the Endpoint https://localhost:7160/api/v1/package is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="View Package (Traveler)")]
        [Xunit.TraitAttribute("FeatureTitle", "View or Create Package")]
        [Xunit.TraitAttribute("Description", "View Package (Traveler)")]
        [Xunit.TraitAttribute("Category", "view-package")]
        public virtual void ViewPackageTraveler()
        {
            string[] tagsOfScenario = new string[] {
                    "view-package"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View Package (Traveler)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 9
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    this.FeatureBackground();
#line hidden
#line 10
        testRunner.When("a Get request is sent with id 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
        testRunner.Then("a Response Package with Status 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Description",
                            "LocationAddress",
                            "Duration",
                            "Capacity",
                            "Price",
                            "Image",
                            "AgencyId",
                            "LocationId",
                            "Views",
                            "Sales",
                            "Category"});
                table1.AddRow(new string[] {
                            "1",
                            "Sample",
                            "Sample",
                            "Sample",
                            "3",
                            "13",
                            "100",
                            "Sample",
                            "1",
                            "1",
                            "1",
                            "1",
                            "STANDARD"});
#line 12
        testRunner.And("a Package Resource is included in Response Body", ((string)(null)), table1, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create Package (Travel agency)")]
        [Xunit.TraitAttribute("FeatureTitle", "View or Create Package")]
        [Xunit.TraitAttribute("Description", "Create Package (Travel agency)")]
        [Xunit.TraitAttribute("Category", "create-package")]
        public virtual void CreatePackageTravelAgency()
        {
            string[] tagsOfScenario = new string[] {
                    "create-package"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create Package (Travel agency)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 17
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description",
                            "LocationAddress",
                            "Duration",
                            "Capacity",
                            "Price",
                            "Image",
                            "Views",
                            "Sales",
                            "Category",
                            "AgencyId",
                            "LocationId"});
                table2.AddRow(new string[] {
                            "Sample",
                            "Sample",
                            "Sample",
                            "3",
                            "13",
                            "100",
                            "Sample",
                            "1",
                            "1",
                            "STANDARD",
                            "1",
                            "1"});
#line 18
        testRunner.When("a Post request is sent", ((string)(null)), table2, "When ");
#line hidden
#line 21
        testRunner.Then("a Response Package with Status 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Description",
                            "LocationAddress",
                            "Duration",
                            "Capacity",
                            "Price",
                            "Image",
                            "Views",
                            "Sales",
                            "Category",
                            "AgencyId",
                            "LocationId"});
                table3.AddRow(new string[] {
                            "1",
                            "Sample",
                            "Sample",
                            "Sample",
                            "3",
                            "13",
                            "100",
                            "Sample",
                            "1",
                            "1",
                            "STANDARD",
                            "1",
                            "1"});
#line 22
        testRunner.And("a Package Resource is included in Response Body", ((string)(null)), table3, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ViewOrCreatePackageFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ViewOrCreatePackageFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
